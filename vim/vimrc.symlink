" ===== VUNDLE =====
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" :PluginList          - list configured plugins
Plugin 'VundleVim/Vundle.vim'
" Plugin 'drmingdrmer/xptemplate'
" Plugin 'ctrlpvim/ctrlp.vim'
" Plugin 'tfnico/vim-gradle'
Plugin 'tpope/vim-fugitive'
" Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-surround'
Plugin 'scrooloose/nerdtree'
Plugin 'ervandew/supertab'
" Plugin 'sheerun/vim-polyglot'
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'airblade/vim-gitgutter'
" Plugin 'vim-airline/vim-airline'
" Plugin 'wellle/targets.vim'
" Plugin 'pearofducks/ansible-vim'
" Plugin 'trapd00r/vim-syntax-vidir-ls'

call vundle#end()            " required
filetype plugin indent on    " required
" ===== END VUNDLE =====

" Allow unsaved buffers in the background
set hidden

" Show line and column numbers
set ruler

" Open new splits on the right and the bottom
set splitright
set splitbelow

" Show airline before a split is made
set laststatus=2

" Don't select first option on omnicomplete, and show menu even if only one
" option
set completeopt=longest,menuone

" Use omnifunc for supertab completion before completefunc
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']

" <Tab> will select current omnicomplete option
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Add Powerline symbols for vim-airline
let g:airline_powerline_fonts = 1

" Set diff splits to be vertical by default
set diffopt+=vertical

" KEY MAPPINGS
" Press Space to turn off highlighting and clear any message already displayed.
nnoremap <silent> <Space> :nohlsearch<CR>
" <Bar>:echo<CR>A

" Close the current buffer without closing the split
nnoremap <C-c> :bp\|bd #<CR>

" Commands to insert and append a single character
nnoremap gi :exec "normal i".nr2char(getchar())."\e"<CR>
nnoremap ga :exec "normal a".nr2char(getchar())."\e"<CR>

" Map Y to yank to the end of the line
map Y y$

" Map ;h to a.vim :A, swap header and c file
nmap ,h :A<CR>
nmap ,H :AV<CR>

" Easier buffer navigation
map gn :bn<cr>
map gN :bp<cr>
map gp :bp<cr>

" Shorthand for :GoRun
map gr :GoFmt<cr>:w<cr>:GoRun<cr>

" NERDTree
map <C-n> :NERDTreeToggle<CR>

" Don't prompt to save when reading from stdin
" au StdinReadPost * :set nomodified

" Shortcuts for tab close, tab edit, and tab find
nmap ,tx :tabc<CR>
nmap ,to :tabo<CR>
nmap ,te :tabe 
nmap ,tf :tabf 
nmap ,z :qa!<CR>

nmap __ :wa<CR>

" Change the current working directory to the one containing this file
nmap <silent> ,cd :lcd %:h<CR>
nmap <silent> ,cr :lcd <c-r>=FindGitDirOrRoot()<cr><cr>

" Cory-friendly half-page scrolling
nmap <C-d> Lzz
nmap <C-u> Hzz

if version >= 703
  silent !mkdir -p ~/.vim/undo
  set undofile                " Save undo's after file closes
  set undodir=/Users/coryklein/.vim/undo " where to save undo histories
  set undolevels=1000         " How many undos
  set undoreload=10000        " number of lines to save for undo
endif

" SETTINGS
" Automatically save the file when you are leaving a buffer or window
" set autowriteall

" highlight search matches
set hlsearch

" backspace over everything
set backspace=indent,eol,start

" Don't wrap text
set nowrap

set nu

" White space error
" set listchars=tab:>-,trail:-
" set list

" Color
set bg=light
colorscheme wombat256mod
syntax on
set t_Co=256

" tab-completion of files
set wildmode=longest,list,full
set wildmenu

" Highlight current line
" set cursorline

" Indents, Tabs, & Misc
set tabstop=2
set shiftwidth=2
set expandtab
autocmd FileType html setlocal shiftwidth=4 tabstop=4
autocmd FileType groovy setlocal shiftwidth=2 tabstop=2

" File type extensions
au BufNewFile,BufRead *.jenkinsfile set filetype=groovy
au BufNewFile,BufRead Jenkinsfile set filetype=groovy
au BufNewFile,BufRead Jenkinsfile.* set filetype=groovy

" Crontab
autocmd filetype crontab setlocal nobackup nowritebackup

" ctags config
set tags=tags;/

" Don't use swap files
set noswapfile

" Indentation
set autoindent

" vi compatibility
set nocompatible

" Search features
set incsearch  " scroll to search items as I type them
set ignorecase
set smartcase  " don't ignore case if uppercase is present

set scrolloff=3 " scroll buffer when within x lines of top/bottom

" Don't hide lines that don't fit in the window
set display+=lastline

" yank to clipboard
" http://www.markcampbell.me/2016/04/12/setting-up-yank-to-clipboard-on-a-mac-with-vim.html
if has("clipboard")
  set clipboard=unnamed " copy to the system clipboard

  if has("unnamedplus") " X11 support
    set clipboard+=unnamedplus
  endif
endif

" Set color of tab line fill to black
hi TabLine term=underline cterm=underline ctermfg=LightGray ctermbg=DarkGray gui=underline guibg=DarkGray
hi TabLineFill term=bold cterm=bold ctermbg=Black
hi VertSplit term=bold cterm=bold ctermfg=DarkGray ctermbg=NONE
hi StatusLine term=bold cterm=bold ctermbg=LightGray ctermfg=DarkGray
hi StatusLineNC term=reverse ctermbg=DarkGray ctermfg=LightGray

" Command JsonTool that takes a range and formats it with python's json.tool
command! -range -nargs=0 -bar JsonTool <line1>,<line2>!python -m json.tool

" Run the publish.sh script in the local directory
nnoremap <C-P> :call SaveAndPublish()<CR>
function! SaveAndPublish()
    :w
    :! ./publish.sh &
endfunction

"This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
    silent exe "normal! `[v`]\"_c"
    silent exe "normal! p"
endfunction

nmap <silent> cP :set opfunc=ChangePastePrev<CR>g@
function! ChangePastePrev(type, ...)
    silent exe "normal! `[v`]\"_c"
    silent exe "normal! P"
endfunction

function! SortLines() range
    silent execute a:firstline . "," . a:lastline . 's/^\(.*\)$/\=strlen( submatch(0) ) . " " . submatch(0)/'
    silent execute a:firstline . "," . a:lastline . 'sort n'
    silent execute a:firstline . "," . a:lastline . 's/^\d\+\s//'
endfunction

" File type recognition
filetype plugin indent on

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Command to diffput to all buffers
" See http://stackoverflow.com/questions/19594802/diffput-to-multiple-buffers
function! GetDiffBuffers()
    return map(filter(range(1, winnr('$')), 'getwinvar(v:val, "&diff")'), 'winbufnr(v:val)')
endfunction

function! DiffPutAll()
    for bufspec in GetDiffBuffers()
        execute 'diffput' bufspec
    endfor
endfunction

command! -range=-1 -nargs=* Dpa call DiffPutAll()

function! FindGitDirOrRoot()
  let curdir = expand('%:p:h')
  let gitdir = finddir('.git', curdir . ';')
  if gitdir != ''
    return substitute(gitdir, '\/\.git$', '', '')
  else
    return '/'
  endif
endfunction

set wildignore+=*.class,*.git,*/out/*

"-----------------------------------------------------------------------------
" \w for better movement when writing novels with line wrapping
"-----------------------------------------------------------------------------
noremap <silent> <Leader>w :call ToggleWrap()<CR>
function ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    set nu
    setlocal nowrap
    set virtualedit=all
    set cursorline
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    set nonu
    setlocal wrap linebreak nolist
    set virtualedit=
    set nocursorline
    setlocal display+=lastline
    noremap  <buffer> <silent> k gk
    noremap  <buffer> <silent> j gj
    noremap  <buffer> <silent> ^ g<Home>
    noremap  <buffer> <silent> 0 g<Home>
    noremap  <buffer> <silent> $  g<End>
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction

let g:tar_cmd="/usr/local/bin/gtar"
