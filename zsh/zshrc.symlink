# For profiling terminal startup time
# zmodload zsh/zprof

# START MANUAL PROFILING
# PS4=$'+ %D{%s.%6.}\011 '
# exec 3>&2 2>>/tmp/bashstart.$$.log
# set -x
# END PROFILING

# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# To allow for ^ character in git: HEAD^
unsetopt nomatch

# https://github.com/rupa/z
# Frecency directory changing
. ~/.dotfiles/bin/z.sh

# Don't ask if I want to rm *
setopt rmstarsilent

export EDITOR=vim

# Disabled to speed up zsh startup loadtime
# source <(kubectl completion zsh)

autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

zmodload zsh/terminfo
bindkey "$terminfo[cuu1]" history-substring-search-up
bindkey "$terminfo[cud1]" history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# Interpret '#' chars as comments like in bash
setopt interactivecomments

export VIDIR_EDITOR_ARGS='-c :set nolist | :set ft=vidir-ls'

function take() {
  mkdir -p $1
  cd $1
}

# Virtualenv
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/

if [ -e /usr/share/virtualenvwrapper/virtualenvwrapper.sh ]; then
    source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
fi
if [ -e /usr/local/bin/virtualenvwrapper.sh ]; then
    source /usr/local/bin/virtualenvwrapper.sh
fi
if [ -e ~/setenv.sh ]; then
    source ~/setenv.sh
fi

# source $HOME/bin/google-cloud-sdk/completion.zsh.inc
# source $HOME/bin/google-cloud-sdk/path.zsh.inc

# export JAVA_HOME=`/usr/libexec/java_home -v 1.8`

#############################################################################
# From https://iterable.quip.com/bLH8AXE30Ixv/Development-Environment-Setup #
#############################################################################
if [[ -f "$HOME/.okta/bash_functions" ]]; then
    . "$HOME/.okta/bash_functions"
fi
if [[ -d "$HOME/.okta/bin" && ":$PATH:" != *":$HOME/.okta/bin:"* ]]; then
    PATH="$HOME/.okta/bin:$PATH"
fi
export EC2_SSH_USER=ec2-user
export SBT_OPTS="-Xmx10G -Xms2G -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled -Xss2M"

export PATH=~/Library/Python/2.7/bin/:$PATH
# Moved to ~/.profile so it only runs once on login
# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init -)"
# fi
#############################################################################
#                                    END                                    #
#############################################################################
export PATH=$HOME/bin:$PATH
export PATM=$HOME/.gem/ruby/2.6.0/bin:$PATH
export ANDROID_HOME=/Users/cory.klein/Library/Android/sdk
export ANDROID_SDK_ROOT=/Users/cory.klein/Library/Android/sdk

# Disabled to improve tab loading time
# eval "$(rbenv init -)"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

### DOESNT WORK IN ZSH BECAUSE IT RELIES ON BASHISMS
# Defer initialization of nvm until nvm, node or a node-dependent command is
# run. Ensure this block is only run once if .bashrc gets sourced multiple times
# by checking whether __init_nvm is a function.
# if [ -s "/usr/local/opt/nvm/nvm.sh" ] && [ ! "$(type -t __init_nvm)" = function ]; then
#   export NVM_DIR="$HOME/.nvm"
#   [ -s "$NVM_DIR/bash_completion" ] && . "/usr/local/opt/nvm/etc/bash_completion"
#   declare -a __node_commands=('nvm' 'node' 'npm' 'yarn' 'gulp' 'grunt' 'webpack')
#   function __init_nvm() {
#     for i in "${__node_commands[@]}"; do unalias $i; done
#     . /usr/local/opt/nvm/nvm.sh
#     unset __node_commands
#     unset -f __init_nvm
#   }
#   for i in "${__node_commands[@]}"; do alias $i='__init_nvm && '$i; done
# fi

# This is the old and slow way that the above block is meant to get around
export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh


# START MANUAL PROFILING
# set +x
# exec 2>&3 3>&-
# END PROFILING

# Run sbt server
export SBT_NATIVE_CLIENT=true
